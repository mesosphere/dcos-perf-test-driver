
#################################################
# Global test configuration
#################################################
config:

  # Define the parameters this policy will be updating
  parameters:
    # - name: apps
    #   uuid: 7836e302bb7f43ea8e3477264c9b523e
    #   units: count
    #   desc: The number of apps deployed to marathon
    - name: instances
      uuid: 4a003e85e8bb4a95a340eec1727cfd0d
      units: count
      desc: The number of instances per application deployment

  # # Introduce some indicators that will be used to extract
  # # the outcome of the test as a single scalar value
  # indicators:

  #   # Calculate `meanDeploymentTime` by calculating the normalizing average
  #   # of all the `deploymentTime` mean values, normalized against the number
  #   # of instances
  #   - name: meanDeploymentTime
  #     class: indicator.NormalizedMeanMetricIndicator
  #     metric: deploymentTime.mean
  #     parameter: instances

  #   # Calculate `meanHttpRequestTime` by calculating the normalizing average
  #   # of all the `deploymentTime` mean values, normalized against the number
  #   # of instances
  #   - name: meanHttpRequestTime
  #     class: indicator.NormalizedMeanMetricIndicator
  #     metric: httpRequestTime.mean
  #     parameter: instances

#################################################
# Test Metadata
#################################################
meta:
  test: n-app-n-instances

#################################################
# Test policy configuration
#################################################
policies:

  # # Use a chained deployment policy that submits a new request only when
  # # the previous deployment has completed
  # - class: policy.ChainedDeploymentPolicy
  #   events:
  #     success: MarathonDeploymentSuccessEvent
  #     failure: MarathonDeploymentFailedEvent
  #   parameter: instances
  #   values: [1, 2, 4, 8, 16]
  #   #, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]

  - class: policy.MultivariableExplorerPolicy

    # The following rules describe the permutation matrix
    matrix:
      apps:
        type: discrete
        values: [1, 2, 4, 8, 16]
      instances:
        type: discrete
        values: [1, 2, 4, 8, 16]

    # The event binding configuration
    events:

      # Wait until marathin is started before continuing with the tests
      start: MarathonStartedEvent

      # Signal the status of the following events
      signal:
        OK: MarathonDeploymentSuccessEvent
        FAILURE: MarathonDeploymentFailedEvent

      # Wait for the given number of events (evaluated at run-time)
      # signalEventCount: apps

#################################################
# Channel configuration
#################################################
channels:

  # Perform an HTTP request for every `instance` parameter change
  - class: channel.HTTPChannel
    url: "{{marathon_url}}/v2/apps"
    verb: POST
    repeat: "{{apps}}"
    body: |
      {
        "cmd": "sleep 1200",
        "cpus": 0.005,
        "mem": 32,
        "disk": 0,
        "instances": {{instances}},
        "id": "/scale-instances/{{uuid()}}",
        "backoffFactor": 1.0,
        "backoffSeconds": 0
      }

#################################################
# One-time tasks
#################################################
tasks:

  # Right after ever test run we should remove all the instances
  - class: tasks.marathon.RemoveGroup
    url: "{{marathon_url}}"
    group: /scale-instances
    at: intertest

  # Also remove the tests if they were abruptly terminated
  - class: tasks.marathon.RemoveGroup
    url: "{{marathon_url}}"
    group: /scale-instances
    at: teardown

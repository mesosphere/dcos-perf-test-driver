
#################################################
# Global test configuration
#################################################
config:

  # Define the parameters this policy will be updating
  parameters:
    - name: apps
      uuid: 7836e302bb7f43ea8e3477264c9b523e
      units: count
      desc: The number of apps deployed to marathon

  # Introduce some indicators that will be used to extract
  # the outcome of the test as a single scalar value
  indicators:

    # Calculate `meanDeploymentTime` by calculating the normalizing average
    # of all the `deploymentTime` mean values, normalized against the number
    # of apps
    - name: meanDeploymentTime
      class: indicator.NormalizedMeanMetricIndicator
      metric: deploymentTime.mean
      parameter: apps

    # Calculate `meanHttpRequestTime` by calculating the normalizing average
    # of all the `deploymentTime` mean values, normalized against the number
    # of apps
    - name: meanHttpRequestTime
      class: indicator.NormalizedMeanMetricIndicator
      metric: httpRequestTime.mean
      parameter: apps

#################################################
# Test Metadata
#################################################
meta:
  test: 1-instance-n-apps

#################################################
# Test policy configuration
#################################################
policies:

  # Use a chained deployment policy that submits a new request only when
  # the previous deployment has completed
  - class: policy.ChainedDeploymentPolicy
    waitForValueEvents: yes
    events:
      success: MarathonDeploymentSuccessEvent
      failure: MarathonDeploymentFailedEvent
    parameter: apps
    values: [16, 32, 64, 128]

#################################################
# Channel configuration
#################################################
channels:

  # Perform an HTTP request for every `instance` parameter change
  - class: channel.HTTPChannel
    url: "{{marathon_url}}/v2/apps"
    verb: POST
    repeat: "{{apps}}"
    body: |
      {
        "cmd": "sleep 1200",
        "cpus": 0.1,
        "mem": 64,
        "disk": 0,
        "instances": 1,
        "id": "/scale-instances/{{uuid()}}-{{i}}",
        "backoffFactor": 1.0,
        "backoffSeconds": 0
      }

#################################################
# One-time tasks
#################################################
tasks:

  # Right after ever test run we should remove all the instances
  - class: tasks.marathon.RemoveGroup
    url: "{{marathon_url}}"
    group: /scale-instances
    at: intertest

  # Also remove the tests if they were abruptly terminated
  - class: tasks.marathon.RemoveGroup
    url: "{{marathon_url}}"
    group: /scale-instances
    at: teardown
